#+TITLE: YZ's GNU Emacs Config
#+AUTHOR: Yasir Zafar (dpix)
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Welcome!

#+begin_src emacs-lisp

  ;; You will most likely need to adjust this font size for your system!
  (defvar efs/default-font-size 105)
  (defvar efs/default-variable-font-size 105)

#+end_src

* Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

Also, turn on =lexical-binding= for the init file!

#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(add-hook 'emacs-startup-hook
    (lambda ()
      (message "*** Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
			(time-subtract after-init-time before-init-time)))
	       gcs-done)))

#+end_src

* Native Compilation

I've started experimenting with the =native-comp= branch of Emacs for increased performance.  Here are some settings to tweak the behavior slightly:

#+begin_src emacs-lisp

  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store the native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 3)        ; Give some breathing room

    (menu-bar-mode -1)            ; Disable the menu bar

    (column-number-mode)
    (global-display-line-numbers-mode t)

  ;;(set-frame-parameter (selected-frame) 'alpha '(85 . 95))
  ;;(add-to-list 'default-frame-alist '(alpha . (85 . 95)))
  ;;(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;;(add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
        term-mode-hook
        vterm-mode-hook
        shell-mode-hook
        treemacs-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
    (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
    (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
    (setq scroll-step 1) ;; keyboard scroll one line at a time
    (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX

  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font Configuration

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height efs/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height efs/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height efs/default-variable-font-size :weight 'regular)

#+end_src

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp
     ;; Make ESC quit prompts
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(defun dw/evil-hook ()
(dolist (mode '(custom-mode
                eshell-mode
                git-rebase-mode
                erc-mode
                circe-server-mode
                circe-chat-mode
                circe-query-mode
                sauron-mode
                term-mode))
(add-to-list 'evil-emacs-state-modes mode)))

(defun dw/dont-arrow-me-bro ()
  (interactive)
  (message "Arrow keys are bad, you know?"))

(use-package undo-tree
  :init
  (global-undo-tree-mode 1))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-tree)
  :config
  (add-hook 'evil-mode-hook 'dw/evil-hook)
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

 ;; Disable arrow keys in normal and visual modes
 (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
 (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
 (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
 (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
 (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
 (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
 (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
 (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :init
  (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
  :config
  (setq evil-collection-mode-list
        (remove 'lispy evil-collection-mode-list))
  (evil-collection-init))
#+end_src

** Genral
#+begin_src emacs-lisp

(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer dw/leader-key-def
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer dw/ctrl-c-keys
    :prefix "C-c"))
  (nvmap :prefix "SPC"
       "b b"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
               "d d" '(dired :which-key "Open dired")
               "d j" '(dired-jump :which-key "Dired jump to current")
               "d p" '(peep-dired :which-key "Peep-dired"))
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "."     '(find-file :which-key "Find file")
       "f f"   '(find-file :which-key "Find file")
       "f r"   '(counsel-recentf :which-key "Recent files")
       "f s"   '(save-buffer :which-key "Save file")
       "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
       "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
       "f C"   '(copy-file :which-key "Copy file")
       "f D"   '(delete-file :which-key "Delete file")
       "f R"   '(rename-file :which-key "Rename file")
       "f S"   '(write-file :which-key "Save file as...")
       "f U"   '(sudo-edit :which-key "Sudo edit file"))
(winner-mode 1)
(nvmap :prefix "SPC"
       ;; Window splits
       "w c"   '(evil-window-delete :which-key "Close window")
       "w n"   '(evil-window-new :which-key "New window")
       "w s"   '(evil-window-split :which-key "Horizontal split window")
       "w v"   '(evil-window-vsplit :which-key "Vertical split window")
       ;; Window motions
       "w h"   '(evil-window-left :which-key "Window left")
       "w j"   '(evil-window-down :which-key "Window down")
       "w k"   '(evil-window-up :which-key "Window up")
       "w l"   '(evil-window-right :which-key "Window right")
       "w w"   '(evil-window-next :which-key "Goto next window")
       ;; winner mode
       "w <left>"  '(winner-undo :which-key "Winner undo")
       "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

* UI Configuration
** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-gruvbox t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-height 28)
    (doom-modeline-icon t)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)
    (doom-modeline-buffer-state-icon t)
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-buffer-modification-icon nil))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Centaur Tabs
#+begin_src emacs-lisp
(setq centaur-tabs-style "zigzag")
(setq centaur-tabs-height 32)
(setq centaur-tabs-set-icons t)
(setq centaur-tabs-set-bar 'under)
(setq x-underline-at-descent-line t)
(setq centaur-tabs-set-close-button nil)
(setq centaur-tabs-set-modified-marker t)
(add-hook 'dired-mode-hook 'centaur-tabs-local-mode)
(use-package centaur-tabs
  :demand
  :config
  (centaur-tabs-mode t)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
#+end_src

* Vertico
#+begin_src emacs-lisp
      (defun dw/minibuffer-backward-kill (arg)
        "When minibuffer is completing a file name delete up to parent
      folder, otherwise delete a word"
        (interactive "p")
        (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
      (backward-kill-word arg)))

      (use-package vertico
        :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . dw/minibuffer-backward-kill))
        :custom
        (vertico-cycle t)
        :custom-face
        (vertico-current ((t (:background "#3a3f5a"))))
        :init
        (vertico-mode))

  ;; A few more useful configurations...
    (use-package orderless
      :init
      (setq completion-styles '(orderless)
            completion-category-defaults nil
            completion-category-overrides '((file (styles . (partial-completion))))))

    (defun dw/get-project-root ()
      (when (fboundp 'projectile-project-root)
        (projectile-project-root)))

    (use-package consult
      :demand t
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :bind (("C-s" . consult-line)
             ("C-M-l" . consult-imenu)
             ("C-M-j" . persp-switch-to-buffer*)
             :map minibuffer-local-map
             ("C-r" . consult-history))
      :custom
      (consult-project-root-function #'dw/get-project-root)
      (completion-in-region-function #'consult-completion-in-region))

    (use-package marginalia
      :after vertico
      :custom
      (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
      :init
      (marginalia-mode))

    (use-package embark
      :bind (("C-S-a" . embark-act)
             :map minibuffer-local-map
             ("C-d" . embark-act))
      :config

      ;; Show Embark actions via which-key
      (setq embark-action-indicator
            (lambda (map)
              (which-key--show-keymap "Embark" map nil nil 'no-paging)
              #'which-key--hide-popup-ignore-command)
            embark-become-indicator embark-action-indicator))

     (use-package embark-consult
       :after (embark consult)
       :demand t
       :hook
       (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src

* Lsp
#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

    (use-package lsp-ui
      :hook ((web-mode) . lsp)
      :commands lsp-ui-mode
      :config
      (setq lsp-headerline-breadcrumb-enable nil)
      (setq lsp-eldoc-enable-hover nil)
      (setq lsp-signature-auto-activate nil) ;; you could manually request them via `lsp-signature-activate`
      (setq lsp-signature-render-documentation nil)
      (setq lsp-completion-show-detail nil)
      (setq lsp-completion-show-kind nil)
      (setq lsp-enable-completion-at-point nil)
      (setq read-process-output-max (* 1024 1024)) ;; 1mb
      (setq lsp-idle-delay 0.5)
      (setq lsp-prefer-capf t) ; prefer lsp's company-capf over company-lsp
      (add-to-list 'lsp-language-id-configuration '(js-jsx-mode . "javascriptreact")))

    (dw/leader-key-def
      "l"  '(:ignore t :which-key "lsp")
      "ld" 'xref-find-definitions
      "lr" 'xref-find-references
      "ln" 'lsp-ui-find-next-reference
      "lp" 'lsp-ui-find-prev-reference
      "ls" 'counsel-imenu
      "le" 'lsp-ui-flycheck-list
      "lS" 'lsp-ui-sideline-mode
      "lX" 'lsp-execute-code-action)
#+end_src

** UI
#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode 1)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'prog-mode-hook 'hs-minor-mode)
  (add-hook 'prog-mode-hook 'highlight-numbers-mode)
  (add-hook 'prog-mode-hook 'highlight-operators-mode)
  (setq highlight-indent-guides-method 'character)

  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))

  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))

  (use-package parinfer
    :disabled
    :hook ((clojure-mode . parinfer-mode)
           (emacs-lisp-mode . parinfer-mode)
           (common-lisp-mode . parinfer-mode)
           (scheme-mode . parinfer-mode)
           (lisp-mode . parinfer-mode))
    :config
    (setq parinfer-extensions
        '(defaults       ; should be included.
          pretty-parens  ; different paren styles for different modes.
          evil           ; If you use Evil.
          smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
          smart-yank)))  ; Yank behavior depend on mode.

  (dw/leader-key-def
    "tp" 'parinfer-toggle-mode)

#+end_src

** Git
#+begin_src emacs-lisp

(use-package magit
  :bind ("C-M-;" . magit-status)
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(dw/leader-key-def
  "g"   '(:ignore t :which-key "git")
  "gs"  'magit-status
  "gd"  'magit-diff-unstaged
  "gc"  'magit-branch-or-checkout
  "gl"   '(:ignore t :which-key "log")
  "glc" 'magit-log-current
  "glf" 'magit-log-buffer-file
  "gb"  'magit-branch
  "gP"  'magit-push-current
  "gp"  'magit-pull-branch
  "gf"  'magit-fetch
  "gF"  'magit-fetch-all
  "gr"  'magit-rebase)
  
#+end_src

** Projectile
#+begin_src emacs-lisp

(defun dw/switch-project-action ()
  "Switch to a workspace with the project name and start `magit-status'."
  ;; TODO: Switch to EXWM workspace 1?
  (persp-switch (projectile-project-name))
  (magit-status))

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :demand t
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'dw/switch-project-action))
  
#+end_src

** Debug
#+begin_src emacs-lisp

(use-package dap-mode
  :custom
  (lsp-enable-dap-auto-configure nil)
  :config
  (dap-ui-mode 1)
  (dap-tooltip-mode 1)
  (require 'dap-node)
  (dap-node-setup))

#+end_src

** Langs
*** ccls
#+begin_src emacs-lisp
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))
(setq ccls-executable "/path/to/ccls/Release/ccls")
;; (setq ccls-args '("--log-file=/tmp/ccls.log"))
(setq lsp-prefer-flymake nil)
(setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
(setq ccls-initialization-options '(:index (:comments 2) :completion (:detailedLabel t)))
(setq company-transformers nil company-lsp-async t company-lsp-cache-candidates nil)
(setq ccls-sem-highlight-method 'font-lock)
;; alternatively, (setq ccls-sem-highlight-method 'overlay)

;; For rainbow semantic highlighting
(ccls-use-default-rainbow-sem-highlight)
(setq company-transformers nil company-lsp-async t company-lsp-cache-candidates nil)
#+end_src

*** Python
#+begin_src emacs-lisp
(use-package lsp-pyright
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp-deferred))))
(use-package blacken
  :init
  (setq-default blacken-fast-unsafe t)
  (setq-default blacken-line-length 80)
  )
(use-package python-mode
  :hook
  (python-mode . pyvenv-mode)
  (python-mode . blacken-mode)
  (python-mode . flycheck-mode)
  (python-mode . company-mode)
  (python-mode . yas-minor-mode)
  )
#+end_src

*** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 2)
    (company-format-margin-function nil)
    (company-idle-delay 0.0))

#+end_src

*** Web

#+begin_src emacs-lisp
(use-package web-mode
  :mode (("\\.html?\\'" . web-mode)
         ("\\.css\\'"   . web-mode)
         ("\\.jsx?\\'"  . web-mode)
         ("\\.tsx?\\'"  . web-mode)
         ("\\.json\\'"  . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+end_src

** Finish
#+begin_src emacs-lisp
(use-package compile
  :custom
  (compilation-scroll-output t))

(defun auto-recompile-buffer ()
  (interactive)
  (if (member #'recompile after-save-hook)
      (remove-hook 'after-save-hook #'recompile t)
    (add-hook 'after-save-hook #'recompile nil t)))
(use-package flycheck
  :defer t
  :hook (lsp-mode . flycheck-mode))
(use-package yasnippet
  :hook (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all))
(use-package smartparens
  :hook (prog-mode . smartparens-mode))
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
(use-package rainbow-mode
  :defer t
  :hook (org-mode
         emacs-lisp-mode
         web-mode
         typescript-mode
         js2-mode))
#+end_src

* Dired
#+begin_src emacs-lisp
	(use-package all-the-icons-dired)

			(use-package dired
				:ensure nil
				:defer 1
				:commands (dired dired-jump)
				:config
				(setq dired-listing-switches "-agho --group-directories-first"
							dired-omit-files "^\\.[^.].*"
							dired-omit-verbose nil
							dired-hide-details-hide-symlink-targets nil
							delete-by-moving-to-trash t)

				(autoload 'dired-omit-mode "dired-x")

				(add-hook 'dired-load-hook
									(lambda ()
										(interactive)
										(dired-collapse)))

				(add-hook 'dired-mode-hook
									(lambda ()
										(interactive)
										(dired-omit-mode 1)
										(dired-hide-details-mode 1)
										(all-the-icons-dired-mode 1)
										(hl-line-mode 1)))

				(use-package dired-rainbow
					:defer 2
					:config
					(dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
					(dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
					(dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
					(dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
					(dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
					(dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
					(dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
					(dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
					(dired-rainbow-define log "#c17d11" ("log"))
					(dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
					(dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
					(dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
					(dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
					(dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
					(dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
					(dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
					(dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
					(dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
					(dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
					(dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

				(use-package dired-single
					:defer t)

				(use-package dired-ranger
					:defer t)

				(use-package dired-collapse
					:defer t)

				(evil-collection-define-key 'normal 'dired-mode-map
					"h" 'dired-single-up-directory
					"H" 'dired-omit-mode
					"l" 'dired-single-buffer
					"y" 'dired-ranger-copy
					"X" 'dired-ranger-move
					"p" 'dired-ranger-paste))

			;; (defun dw/dired-link (path)
			;;   (lexical-let ((target path))
			;;     (lambda () (interactive) (message "Path: %s" target) (dired target))))

			;; (dw/leader-key-def
			;;   "d"   '(:ignore t :which-key "dired")
			;;   "dd"  '(dired :which-key "Here")
			;;   "dh"  `(,(dw/dired-link "~") :which-key "Home")
			;;   "dn"  `(,(dw/dired-link "~/Notes") :which-key "Notes")
			;;   "do"  `(,(dw/dired-link "~/Downloads") :which-key "Downloads")
			;;   "dp"  `(,(dw/dired-link "~/Pictures") :which-key "Pictures")
			;;   "dv"  `(,(dw/dired-link "~/Videos") :which-key "Videos")
			;;   "d."  `(,(dw/dired-link "~/.dotfiles") :which-key "dotfiles")
			;;   "de"  `(,(dw/dired-link "~/.emacs.d") :which-key ".emacs.d"))
#+end_src

* Org Mode
#+begin_src emacs-lisp

	;; TODO: Mode this to another section
	(setq-default fill-column 80)

	;; Turn on indentation and auto-fill mode for Org files
	(defun dw/org-mode-setup ()
		(org-indent-mode)
		(variable-pitch-mode 1)
		(auto-fill-mode 0)
		(visual-line-mode 1)
		(setq evil-auto-indent nil)
		(diminish org-indent-mode))

	(use-package org
		:defer t
		:hook (org-mode . dw/org-mode-setup)
		:config
		(setq org-ellipsis " ▾"
					org-hide-emphasis-markers t
					org-src-fontify-natively t
					org-fontify-quote-and-verse-blocks t
					org-src-tab-acts-natively t
					org-edit-src-content-indentation 2
					org-hide-block-startup nil
					org-src-preserve-indentation nil
					org-startup-folded 'content
					org-cycle-separator-lines 2)

		(setq org-refile-targets '((nil :maxlevel . 1)
															 (org-agenda-files :maxlevel . 1)))

		(setq org-refile-use-outline-path t)

		(evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
		(evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

		(evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
		(evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

(use-package org-superstar
		:after org
		:hook (org-mode . org-superstar-mode)
		:custom
		(org-superstar-remove-leading-stars t)
		(org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

	;; Replace list hyphen with dot
	;; (font-lock-add-keywords 'org-mode
	;;                         '(("^ *\\([-]\\) "
	;;                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

	;; Increase the size of various headings
	(set-face-attribute 'org-document-title nil :font "JetBrainsMono Nerd Font" :weight 'bold :height 1.3)
	(dolist (face '((org-level-1 . 1.2)
									(org-level-2 . 1.1)
									(org-level-3 . 1.05)
									(org-level-4 . 1.0)
									(org-level-5 . 1.1)
									(org-level-6 . 1.1)
									(org-level-7 . 1.1)
									(org-level-8 . 1.1)))
		(set-face-attribute (car face) nil :font "JetBrainsMono Nerd Font" :weight 'medium :height (cdr face)))

	;; Make sure org-indent face is available
	(require 'org-indent)

	;; Ensure that anything that should be fixed-pitch in Org files appears that way
	(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
	(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
	(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
	(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
	(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
	(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
	(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
	(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
	(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

	;; Get rid of the background on column views
	(set-face-attribute 'org-column nil :background nil)
	(set-face-attribute 'org-column-title nil :background nil)

		(require 'org-tempo)

		(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
		(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
		(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
		(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
		(add-to-list 'org-structure-template-alist '("py" . "src python"))
		(add-to-list 'org-structure-template-alist '("go" . "src go"))
		(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
		(add-to-list 'org-structure-template-alist '("json" . "src json"))

	;; This ends the use-package org-mode block
	)
#+end_src

* Vterm
#+begin_src emacs-lisp

(use-package vterm
  :commands vterm
  :config
  (setq vterm-max-scrollback 10000))

#+end_src
